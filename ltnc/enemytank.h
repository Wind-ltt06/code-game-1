#ifndef ENEMYTANK_H
#define ENEMYTANK_H

#include <SDL.h>
#include "defs.h"
#include "Wall.h"
#include <vector>
#include "Bullet.h"
#include <algorithm>
#include <cstdlib>

class EnemyTank {
public:
    int x, y;
    int dirX, dirY;
    int moveCooldown;
    int moveDelay, shootDelay;
    SDL_Rect rect;
    SDL_Texture* texture;  // Th√™m texture cho enemy tank

    bool active;
    std::vector<Bullet> bullets;

    // H√†m kh·ªüi t·∫°o (constructor)
   EnemyTank(int startX, int startY, SDL_Renderer* renderer) {
    x = startX;
    y = startY;
    rect = { x, y, 30, 30 };
    dirX = 0;
    dirY = 1;
    active = true;
    moveCooldown = 15;
    shootDelay = 30;

    // Load texture cho enemy
    texture = loadTexture(renderer, "player/enemytank.jpg");  // ƒê∆∞·ªùng d·∫´n ·∫£nh enemy
    if (!texture) {
        SDL_Log("‚ùå L·ªói khi load texture enemy!\n");
    }
}
    SDL_Texture* loadTexture(SDL_Renderer* renderer, const std::string& path) {
    SDL_Surface* surface = IMG_Load(path.c_str());
    if (!surface) {
        SDL_Log("‚ùå Kh√¥ng th·ªÉ load ·∫£nh %s! L·ªói: %s\n", path.c_str(), IMG_GetError());
        return nullptr;
    }
    SDL_Texture* tex = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    return tex;
}



    // Ki·ªÉm tra xem c√≥ ƒë·∫°n n√†o g·∫ßn kh√¥ng
   bool isDangerNearby(const std::vector<Bullet>& playerBullets) {
    for (const auto& bullet : playerBullets) {
        if (!bullet.active) continue;

        // T√≠nh kho·∫£ng c√°ch t·ª´ ƒë·∫°n ƒë·∫øn tank
        int distX = bullet.x - x;
        int distY = bullet.y - y;

        // D·ª± ƒëo√°n v·ªã tr√≠ vi√™n ƒë·∫°n trong t∆∞∆°ng lai
        int futureX = bullet.x + bullet.dx * 10;  // D·ª± ƒëo√°n 10 b∆∞·ªõc
        int futureY = bullet.y + bullet.dy * 10;

        // Ki·ªÉm tra n·∫øu ƒë·∫°n s·∫Ω g·∫∑p tank trong t∆∞∆°ng lai g·∫ßn
        bool willHitX = (bullet.dx > 0 && x > bullet.x && x < futureX) ||
                        (bullet.dx < 0 && x < bullet.x && x > futureX);
        bool willHitY = (bullet.dy > 0 && y > bullet.y && y < futureY) ||
                        (bullet.dy < 0 && y < bullet.y && y > futureY);

        // ƒê·∫°n ƒëang ƒëi theo chi·ªÅu ngang v√† s·∫Ω ƒëi qua v·ªã tr√≠ Y c·ªßa tank
        if (bullet.dx != 0 && abs(y - bullet.y) < TILE_SIZE && willHitX) {
            return true;
        }

        // ƒê·∫°n ƒëang ƒëi theo chi·ªÅu d·ªçc v√† s·∫Ω ƒëi qua v·ªã tr√≠ X c·ªßa tank
        if (bullet.dy != 0 && abs(x - bullet.x) < TILE_SIZE && willHitY) {
            return true;
        }
    }
    return false;
}

void move(const std::vector<Wall>& walls, int playerX, int playerY, const std::vector<Bullet>& playerBullets) {
    if (moveCooldown > 0) {
        moveCooldown--;
        return;  // Ch∆∞a h·∫øt cooldown, kh√¥ng di chuy·ªÉn
    }
    moveCooldown = 15;  // Reset cooldown

    // Ki·ªÉm tra xem c√≥ ƒë·∫°n g·∫ßn kh√¥ng
    bool isDanger = isDangerNearby(playerBullets);

    // C√°c h∆∞·ªõng di chuy·ªÉn: l√™n, xu·ªëng, tr√°i, ph·∫£i
    std::vector<std::pair<int, int>> directions = {{0, -5}, {0, 5}, {-5, 0}, {5, 0}};

    // X√°o tr·ªôn h∆∞·ªõng di chuy·ªÉn ƒë·ªÉ tƒÉng t√≠nh ng·∫´u nhi√™n
    std::random_shuffle(directions.begin(), directions.end());

    if (isDanger) {
        // N·∫øu c√≥ nguy hi·ªÉm, t√¨m h∆∞·ªõng t·ªët nh·∫•t ƒë·ªÉ n√© ƒë·∫°n
        int bestDx = 0, bestDy = 0;
        int safestDistance = 0;

        for (auto [dx, dy] : directions) {
            int newX = x + dx;
            int newY = y + dy;
            SDL_Rect newRect = {newX, newY, TILE_SIZE, TILE_SIZE};

            // Ki·ªÉm tra va ch·∫°m v·ªõi t∆∞·ªùng
            bool collision = false;
            for (const auto& wall : walls) {
                if (wall.active && SDL_HasIntersection(&newRect, &wall.rect)) {
                    collision = true;
                    break;
                }
            }

            // Ki·ªÉm tra bi√™n m√†n h√¨nh
            bool inBounds = (newX >= TILE_SIZE && newX <= SCREEN_WIDTH - TILE_SIZE * 2 &&
                            newY >= TILE_SIZE && newY <= SCREEN_HEIGHT - TILE_SIZE * 2);

            if (!collision && inBounds) {
                // T√≠nh to√°n m·ª©c ƒë·ªô an to√†n c·ªßa v·ªã tr√≠ m·ªõi
                int safetyScore = 0;

                for (const auto& bullet : playerBullets) {
                    if (!bullet.active) continue;

                    // Kho·∫£ng c√°ch t·ª´ v·ªã tr√≠ m·ªõi ƒë·∫øn ƒë·∫°n
                    int bulletDistX = abs(bullet.x - newX);
                    int bulletDistY = abs(bullet.y - newY);

                    // ƒê·∫°n c√†ng xa c√†ng an to√†n
                    safetyScore += bulletDistX + bulletDistY;

                    // Tr√°nh di chuy·ªÉn theo h∆∞·ªõng ƒë·∫°n ƒëang bay t·ªõi
                    if ((bullet.dx > 0 && dx > 0) ||
                        (bullet.dx < 0 && dx < 0) ||
                        (bullet.dy > 0 && dy > 0) ||
                        (bullet.dy < 0 && dy < 0)) {
                        safetyScore -= 50; // Ph·∫°t n·∫∑ng n·∫øu di chuy·ªÉn theo h∆∞·ªõng ƒë·∫°n
                    }

                    // Th∆∞·ªüng n·∫øu di chuy·ªÉn vu√¥ng g√≥c v·ªõi h∆∞·ªõng ƒë·∫°n
                    if ((bullet.dx != 0 && dy != 0) || (bullet.dy != 0 && dx != 0)) {
                        safetyScore += 30;
                    }
                }

                if (safetyScore > safestDistance) {
                    safestDistance = safetyScore;
                    bestDx = dx;
                    bestDy = dy;
                }
            }
        }

        // Di chuy·ªÉn theo h∆∞·ªõng an to√†n nh·∫•t
        if (bestDx != 0 || bestDy != 0) {
            x += bestDx;
            y += bestDy;
            rect.x = x;
            rect.y = y;
            dirX = (bestDx != 0) ? bestDx / abs(bestDx) : 0;
            dirY = (bestDy != 0) ? bestDy / abs(bestDy) : 0;
        }
    } else {
        // Kh√¥ng c√≥ nguy hi·ªÉm, ƒëi v·ªÅ ph√≠a ng∆∞·ªùi ch∆°i v·ªõi x√°c su·∫•t cao
        if (rand() % 100 < 70) { // 70% th·ªùi gian di chuy·ªÉn v·ªÅ ph√≠a ng∆∞·ªùi ch∆°i
            int bestDx = 0, bestDy = 0;
            int shortestDistance = abs(x - playerX) + abs(y - playerY);

            for (auto [dx, dy] : directions) {
                int newX = x + dx;
                int newY = y + dy;
                SDL_Rect newRect = {newX, newY, TILE_SIZE, TILE_SIZE};

                bool collision = false;
                for (const auto& wall : walls) {
                    if (wall.active && SDL_HasIntersection(&newRect, &wall.rect)) {
                        collision = true;
                        break;
                    }
                }

                bool inBounds = (newX >= TILE_SIZE && newX <= SCREEN_WIDTH - TILE_SIZE * 2 &&
                                newY >= TILE_SIZE && newY <= SCREEN_HEIGHT - TILE_SIZE * 2);

                int newDistance = abs(newX - playerX) + abs(newY - playerY);
                if (!collision && inBounds && newDistance < shortestDistance) {
                    bestDx = dx;
                    bestDy = dy;
                    shortestDistance = newDistance;
                }
            }

            // Di chuy·ªÉn theo h∆∞·ªõng t·ªët nh·∫•t
            if (bestDx != 0 || bestDy != 0) {
                x += bestDx;
                y += bestDy;
                rect.x = x;
                rect.y = y;
                dirX = (bestDx != 0) ? bestDx / abs(bestDx) : 0;
                dirY = (bestDy != 0) ? bestDy / abs(bestDy) : 0;
            }
        } else {
            // 30% th·ªùi gian di chuy·ªÉn ng·∫´u nhi√™n
            for (auto [dx, dy] : directions) {
                int newX = x + dx;
                int newY = y + dy;
                SDL_Rect newRect = {newX, newY, TILE_SIZE, TILE_SIZE};

                bool collision = false;
                for (const auto& wall : walls) {
                    if (wall.active && SDL_HasIntersection(&newRect, &wall.rect)) {
                        collision = true;
                        break;
                    }
                }

                bool inBounds = (newX >= TILE_SIZE && newX <= SCREEN_WIDTH - TILE_SIZE * 2 &&
                                newY >= TILE_SIZE && newY <= SCREEN_HEIGHT - TILE_SIZE * 2);

                if (!collision && inBounds) {
                    x = newX;
                    y = newY;
                    rect.x = x;
                    rect.y = y;
                    dirX = (dx != 0) ? dx / abs(dx) : 0;
                    dirY = (dy != 0) ? dy / abs(dy) : 0;
                    break;
                }
            }
        }
    }

}

   void shoot() {
    if (shootDelay > 0) {
        shootDelay--;
        return;
    }
    shootDelay = 30;

    if (dirX == 0 && dirY == 0) {
        SDL_Log("‚ö†Ô∏è EnemyTank kh√¥ng c√≥ h∆∞·ªõng b·∫Øn!");
    } else {
        SDL_Log("üöÄ EnemyTank b·∫Øn ƒë·∫°n! H∆∞·ªõng: (%d, %d)", dirX, dirY);
    }

    bullets.push_back(Bullet(x + 15, y + 15, dirX, dirY, 10));
    SDL_Log("üî¥ S·ªë l∆∞·ª£ng ƒë·∫°n: %lu", bullets.size());
}


    void updateBullets(const std::vector<Wall>& walls) {
    for (auto &bullet : bullets) {
        bullet.move(walls);
    }
    bullets.erase(std::remove_if(bullets.begin(), bullets.end(), [](Bullet &b) {
        return !b.active;
    }), bullets.end());
}



    void render(SDL_Renderer* renderer) {
    if (texture) {
        SDL_RenderCopy(renderer, texture, NULL, &rect);
    } else {
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderFillRect(renderer, &rect);  // N·∫øu kh√¥ng c√≥ ·∫£nh, v·∫Ω h√¨nh ch·ªØ nh·∫≠t ƒë·ªè
    }
}

};

#endif // ENEMYTANK_H
